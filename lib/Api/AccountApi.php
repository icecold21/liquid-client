<?php
/**
 * AccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the liquid code generator program.
 * https://github.com/liquidregistrar/liquid-php
 * Do not edit the class manually.
 */

namespace Liquid\Client\Api;

use \Liquid\Client\Configuration;
use \Liquid\Client\ApiClient;
use \Liquid\Client\ApiException;
use \Liquid\Client\ObjectSerializer;

/**
 * AccountApi Class Doc Comment
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
class AccountApi
{

    /**
     * API Client
     * @var \Liquid\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \Liquid\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.liqu.id/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \Liquid\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \Liquid\Client\ApiClient $apiClient set the API client
     * @return AccountApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * retrieveAccountsBalance
     *
     * retrieve account's balance
     *
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveAccountsBalance()
    {


        // parse inputs
        $resourcePath = "/account/balance";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());







        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllPricesAccount
     *
     * list all prices applied for current account
     *
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllPricesAccount()
    {


        // parse inputs
        $resourcePath = "/account/prices";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());







        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAccountsTransactions
     *
     * list all account's transactions
     *
     * @param int $limit Limit number of Transactions to be fetched. This should be a value between 10 to 100. (optional)
     * @param int $page_no Page number for which details are to be fetched (optional)
     * @param string $transaction_type Type of the Transactions. Possible values can be domain, deposit, note, privacy_protect. (optional)
     * @param string $transaction_id Transaction ID (optional)
     * @param string $date_start UNIX TimeStamp for listing of Transactions whose Creation Date is greater than date_start. Value can be yyyy-mm-dd. (optional)
     * @param string $date_end UNIX TimeStamp for listing of Transactions whose Creation Date is less than date_end. Value can be yyyy-mm-dd. (optional)
     * @param int $amount_range_start Lowest amount in the range of Transactions you intend to list (optional)
     * @param int $amount_range_end Highest amount in the range of Transactions you intend to list (optional)
     * @param string $description Description transaction (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAccountsTransactions($limit=null, $page_no=null, $transaction_type=null, $transaction_id=null, $date_start=null, $date_end=null, $amount_range_start=null, $amount_range_end=null, $description=null)
    {


        // parse inputs
        $resourcePath = "/account/transactions";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        if ($page_no !== null) {
            $queryParams['page_no'] = $this->apiClient->getSerializer()->toQueryValue($page_no);
        }// query params
        if ($transaction_type !== null) {
            $queryParams['transaction_type'] = $this->apiClient->getSerializer()->toQueryValue($transaction_type);
        }// query params
        if ($transaction_id !== null) {
            $queryParams['transaction_id'] = $this->apiClient->getSerializer()->toQueryValue($transaction_id);
        }// query params
        if ($date_start !== null) {
            $queryParams['date_start'] = $this->apiClient->getSerializer()->toQueryValue($date_start);
        }// query params
        if ($date_end !== null) {
            $queryParams['date_end'] = $this->apiClient->getSerializer()->toQueryValue($date_end);
        }// query params
        if ($amount_range_start !== null) {
            $queryParams['amount_range_start'] = $this->apiClient->getSerializer()->toQueryValue($amount_range_start);
        }// query params
        if ($amount_range_end !== null) {
            $queryParams['amount_range_end'] = $this->apiClient->getSerializer()->toQueryValue($amount_range_end);
        }// query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }





        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveAccountTransactions
     *
     * retrieve an account's transactions
     *
     * @param int $transaction_id Transaction Ids of the Transactions whose details are to be fetched (required)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveAccountTransactions($transaction_id)
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_id when calling retrieveAccountTransactions');
        }

        // parse inputs
        $resourcePath = "/account/transactions/{transaction_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                "{" . "transaction_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($transaction_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

}
