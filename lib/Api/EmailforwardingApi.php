<?php
/**
 * EmailforwardingApi
 * PHP version 5
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the liquid code generator program.
 * https://github.com/liquidregistrar/liquid-php
 * Do not edit the class manually.
 */

namespace Liquid\Client\Api;

use \Liquid\Client\Configuration;
use \Liquid\Client\ApiClient;
use \Liquid\Client\ApiException;
use \Liquid\Client\ObjectSerializer;

/**
 * EmailforwardingApi Class Doc Comment
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
class EmailforwardingApi
{

    /**
     * API Client
     * @var \Liquid\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \Liquid\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.liqu.id/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \Liquid\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \Liquid\Client\ApiClient $apiClient set the API client
     * @return EmailforwardingApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * listAllEmailForwarding
     *
     * list all email forwarding
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllEmailForwarding($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllEmailForwarding');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/email_forwarding";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * createEmailForwarding
     *
     * create a new email forwarding
     *
     * @param int $domain_id Domain ID (required)
     * @param string $email Email (required)
     * @param string $forward_to Email Forward Destination. an email address can only forwarded to no more than 5 email addresses. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function createEmailForwarding($domain_id, $email, $forward_to, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling createEmailForwarding');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling createEmailForwarding');
        }
        // verify the required parameter 'forward_to' is set
        if ($forward_to === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forward_to when calling createEmailForwarding');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/email_forwarding";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }// form params
        if ($forward_to !== null) {
            $formParams['forward_to'] = $this->apiClient->getSerializer()->toFormValue($forward_to);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveCatchAllEmailForwarding
     *
     * retrieve catch_all email forwarding
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveCatchAllEmailForwarding($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveCatchAllEmailForwarding');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/email_forwarding/catch_all";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateCatchAllEmailAddress
     *
     * update catch all email address
     *
     * @param int $domain_id Domain ID (required)
     * @param string $email Email (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateCatchAllEmailAddress($domain_id, $email=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateCatchAllEmailAddress');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/email_forwarding/catch_all";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveAnEmailForwarding
     *
     * retrieve an email forwarding
     *
     * @param int $domain_id Domain ID (required)
     * @param int $email Email (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveAnEmailForwarding($domain_id, $email, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveAnEmailForwarding');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling retrieveAnEmailForwarding');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/email_forwarding/{email}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($email !== null) {
            $resourcePath = str_replace(
                "{" . "email" . "}",
                $this->apiClient->getSerializer()->toPathValue($email),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateAnEmailForwarding
     *
     * update an email forwarding
     *
     * @param int $domain_id Domain ID (required)
     * @param string $email Email Source (required)
     * @param string $forward_to Email Destination, max 5 email. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateAnEmailForwarding($domain_id, $email, $forward_to, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateAnEmailForwarding');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling updateAnEmailForwarding');
        }
        // verify the required parameter 'forward_to' is set
        if ($forward_to === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forward_to when calling updateAnEmailForwarding');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/email_forwarding/{email}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($email !== null) {
            $resourcePath = str_replace(
                "{" . "email" . "}",
                $this->apiClient->getSerializer()->toPathValue($email),
                $resourcePath
            );
        }
        // form params
        if ($forward_to !== null) {
            $formParams['forward_to'] = $this->apiClient->getSerializer()->toFormValue($forward_to);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteAnEmailForwarding
     *
     * delete an email forwarding
     *
     * @param int $domain_id Domain ID (required)
     * @param string $email Email (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteAnEmailForwarding($domain_id, $email, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteAnEmailForwarding');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling deleteAnEmailForwarding');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/email_forwarding/{email}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($email !== null) {
            $resourcePath = str_replace(
                "{" . "email" . "}",
                $this->apiClient->getSerializer()->toPathValue($email),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

}
