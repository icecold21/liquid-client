<?php
/**
 * DnsApi
 * PHP version 5
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the liquid code generator program.
 * https://github.com/liquidregistrar/liquid-php
 * Do not edit the class manually.
 */

namespace Liquid\Client\Api;

use \Liquid\Client\Configuration;
use \Liquid\Client\ApiClient;
use \Liquid\Client\ApiException;
use \Liquid\Client\ObjectSerializer;

/**
 * DnsApi Class Doc Comment
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
class DnsApi
{

    /**
     * API Client
     * @var \Liquid\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \Liquid\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.liqu.id/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \Liquid\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \Liquid\Client\ApiClient $apiClient set the API client
     * @return DnsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * listCanonicalCNAME_
     *
     * list all canonical (CNAME) records of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listCanonicalCNAME_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listCanonicalCNAME_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/cname";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewCNAME_
     *
     * add a new canonical (CNAME) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $value Value, Value for CNAME record should be a host/domainname/fqdn &amp; not an IP Address (required)
     * @param string $hostname Hostname, example namadomain102.com (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewCNAME_($domain_id, $value, $hostname=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewCNAME_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addANewCNAME_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/cname";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteCanonicalCNAME_
     *
     * delete a canonical (CNAME) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname (required)
     * @param string $value Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteCanonicalCNAME_($domain_id, $hostname, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteCanonicalCNAME_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteCanonicalCNAME_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteCanonicalCNAME_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/cname/{hostname}/{value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($value !== null) {
            $resourcePath = str_replace(
                "{" . "value" . "}",
                $this->apiClient->getSerializer()->toPathValue($value),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateACanonicalCNAME_
     *
     * update a canonical (CNAME) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Old Hostname (required)
     * @param string $old_value Old Value (required)
     * @param string $value New Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateACanonicalCNAME_($domain_id, $old_hostname, $old_value, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateACanonicalCNAME_');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateACanonicalCNAME_');
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_value when calling updateACanonicalCNAME_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateACanonicalCNAME_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/cname/{old_hostname}/{old_value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_value !== null) {
            $resourcePath = str_replace(
                "{" . "old_value" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_value),
                $resourcePath
            );
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllIPA_
     *
     * list all ip address (A) records of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllIPA_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllIPA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ip";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewIPA_
     *
     * add a new ip address (A) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $value Value, example 203.168.176.23 (required)
     * @param string $hostname Hostname (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewIPA_($domain_id, $value, $hostname=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewIPA_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addANewIPA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ip";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteIPA_
     *
     * delete an ip address (A) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname (required)
     * @param string $value Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteIPA_($domain_id, $hostname, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteIPA_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteIPA_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteIPA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ip/{hostname}/{value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($value !== null) {
            $resourcePath = str_replace(
                "{" . "value" . "}",
                $this->apiClient->getSerializer()->toPathValue($value),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateAIPA_
     *
     * update a ip address (A) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Old Hostname (required)
     * @param string $old_value Old Value (required)
     * @param string $value New Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateAIPA_($domain_id, $old_hostname, $old_value, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateAIPA_');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateAIPA_');
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_value when calling updateAIPA_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateAIPA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ip/{old_hostname}/{old_value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_value !== null) {
            $resourcePath = str_replace(
                "{" . "old_value" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_value),
                $resourcePath
            );
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllIPv6AAAA_
     *
     * list all ipv6 address (AAAA) records of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllIPv6AAAA_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllIPv6AAAA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ipv6";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewIPV6AAAA_
     *
     * add a new ipv6 address (AAAA) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $value Value, example 2001:db8:85a3:0:0:8a2e:370:7334 (required)
     * @param string $hostname Hostname (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewIPV6AAAA_($domain_id, $value, $hostname=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewIPV6AAAA_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addANewIPV6AAAA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ipv6";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteIPV6AAAA_
     *
     * delete an ipv6 address (AAAA) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname (required)
     * @param string $value Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteIPV6AAAA_($domain_id, $hostname, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteIPV6AAAA_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteIPV6AAAA_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteIPV6AAAA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ipv6/{hostname}/{value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($value !== null) {
            $resourcePath = str_replace(
                "{" . "value" . "}",
                $this->apiClient->getSerializer()->toPathValue($value),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateAIPV6AAAA_
     *
     * update a ipv6 address (AAAA) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Old Hostname (required)
     * @param string $old_value Old Value (required)
     * @param string $value New Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateAIPV6AAAA_($domain_id, $old_hostname, $old_value, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateAIPV6AAAA_');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateAIPV6AAAA_');
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_value when calling updateAIPV6AAAA_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateAIPV6AAAA_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ipv6/{old_hostname}/{old_value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_value !== null) {
            $resourcePath = str_replace(
                "{" . "old_value" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_value),
                $resourcePath
            );
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllMailExchangerMX_
     *
     * list all mail exchanger (MX) records of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllMailExchangerMX_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllMailExchangerMX_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/mx";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewMailExchangerMX
     *
     * add a new mail exchanger (MX) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $value Value (required)
     * @param string $hostname Hostname (optional)
     * @param int $priority Priority (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewMailExchangerMX($domain_id, $value, $hostname=null, $priority=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewMailExchangerMX');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addANewMailExchangerMX');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/mx";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($priority !== null) {
            $formParams['priority'] = $this->apiClient->getSerializer()->toFormValue($priority);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteAMailExchangerMX_
     *
     * delete a mail exchanger (MX) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname (required)
     * @param string $value Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteAMailExchangerMX_($domain_id, $hostname, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteAMailExchangerMX_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteAMailExchangerMX_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteAMailExchangerMX_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/mx/{hostname}/{value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($value !== null) {
            $resourcePath = str_replace(
                "{" . "value" . "}",
                $this->apiClient->getSerializer()->toPathValue($value),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateAMailExchangerMX_
     *
     * update a mail exchanger (MX) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Old Hostname (required)
     * @param string $old_value Old Value (required)
     * @param string $value New Value (required)
     * @param int $priority Priority (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateAMailExchangerMX_($domain_id, $old_hostname, $old_value, $value, $priority=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateAMailExchangerMX_');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateAMailExchangerMX_');
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_value when calling updateAMailExchangerMX_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateAMailExchangerMX_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/mx/{old_hostname}/{old_value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_value !== null) {
            $resourcePath = str_replace(
                "{" . "old_value" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_value),
                $resourcePath
            );
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($priority !== null) {
            $formParams['priority'] = $this->apiClient->getSerializer()->toFormValue($priority);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllNameServerNS_
     *
     * list all name server (NS) records of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllNameServerNS_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllNameServerNS_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ns";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewNameServerNS
     *
     * add a new name server (NS) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $value Value, example name.bumi.orderbox-dns.com (required)
     * @param string $hostname Hostname (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewNameServerNS($domain_id, $value, $hostname=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewNameServerNS');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addANewNameServerNS');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ns";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteANameServerNS
     *
     * delete a name server (NS) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname (required)
     * @param string $value Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteANameServerNS($domain_id, $hostname, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteANameServerNS');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteANameServerNS');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteANameServerNS');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ns/{hostname}/{value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($value !== null) {
            $resourcePath = str_replace(
                "{" . "value" . "}",
                $this->apiClient->getSerializer()->toPathValue($value),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateANameServerNS
     *
     * update a name server (NS) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Old Hostname (required)
     * @param string $old_value Old Value (required)
     * @param string $value New Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateANameServerNS($domain_id, $old_hostname, $old_value, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateANameServerNS');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateANameServerNS');
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_value when calling updateANameServerNS');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateANameServerNS');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/ns/{old_hostname}/{old_value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_value !== null) {
            $resourcePath = str_replace(
                "{" . "old_value" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_value),
                $resourcePath
            );
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllServiceSRV_
     *
     * list all service (SRV) records of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllServiceSRV_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllServiceSRV_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/srv";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewServiceSRV
     *
     * add a new service (SRV) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname, example _chat._tcp.namadomain102.com , _sip._udp.subdomain.namadomain102.com (required)
     * @param string $value Value, example tcp.namadomain102.com (required)
     * @param int $port Port (required)
     * @param int $weight Weight (required)
     * @param string $priority Priority (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewServiceSRV($domain_id, $hostname, $value, $port, $weight, $priority, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewServiceSRV');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling addANewServiceSRV');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addANewServiceSRV');
        }
        // verify the required parameter 'port' is set
        if ($port === null) {
            throw new \InvalidArgumentException('Missing the required parameter $port when calling addANewServiceSRV');
        }
        // verify the required parameter 'weight' is set
        if ($weight === null) {
            throw new \InvalidArgumentException('Missing the required parameter $weight when calling addANewServiceSRV');
        }
        // verify the required parameter 'priority' is set
        if ($priority === null) {
            throw new \InvalidArgumentException('Missing the required parameter $priority when calling addANewServiceSRV');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/srv";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($port !== null) {
            $formParams['port'] = $this->apiClient->getSerializer()->toFormValue($port);
        }// form params
        if ($weight !== null) {
            $formParams['weight'] = $this->apiClient->getSerializer()->toFormValue($weight);
        }// form params
        if ($priority !== null) {
            $formParams['priority'] = $this->apiClient->getSerializer()->toFormValue($priority);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteAServiceSRV
     *
     * delete a service (SRV) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname (required)
     * @param string $value Value (required)
     * @param string $port Port (required)
     * @param string $weight Weight (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteAServiceSRV($domain_id, $hostname, $value, $port, $weight, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteAServiceSRV');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteAServiceSRV');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteAServiceSRV');
        }
        // verify the required parameter 'port' is set
        if ($port === null) {
            throw new \InvalidArgumentException('Missing the required parameter $port when calling deleteAServiceSRV');
        }
        // verify the required parameter 'weight' is set
        if ($weight === null) {
            throw new \InvalidArgumentException('Missing the required parameter $weight when calling deleteAServiceSRV');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/srv/{hostname}/{value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($value !== null) {
            $resourcePath = str_replace(
                "{" . "value" . "}",
                $this->apiClient->getSerializer()->toPathValue($value),
                $resourcePath
            );
        }
        // form params
        if ($port !== null) {
            $formParams['port'] = $this->apiClient->getSerializer()->toFormValue($port);
        }// form params
        if ($weight !== null) {
            $formParams['weight'] = $this->apiClient->getSerializer()->toFormValue($weight);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateAServiceSRV_
     *
     * update a service (SRV) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Old Hostname (required)
     * @param string $old_value Old Value (required)
     * @param int $old_port Old Port (required)
     * @param int $old_weight Old Weight (required)
     * @param int $old_priority Old Priority (required)
     * @param string $value New Value (required)
     * @param int $port Port (optional)
     * @param int $weight Weight (optional)
     * @param string $priority Priority (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateAServiceSRV_($domain_id, $old_hostname, $old_value, $old_port, $old_weight, $old_priority, $value, $port=null, $weight=null, $priority=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateAServiceSRV_');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateAServiceSRV_');
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_value when calling updateAServiceSRV_');
        }
        // verify the required parameter 'old_port' is set
        if ($old_port === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_port when calling updateAServiceSRV_');
        }
        // verify the required parameter 'old_weight' is set
        if ($old_weight === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_weight when calling updateAServiceSRV_');
        }
        // verify the required parameter 'old_priority' is set
        if ($old_priority === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_priority when calling updateAServiceSRV_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateAServiceSRV_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/srv/{old_hostname}/{old_value}/{old_port}/{old_weight}/{old_priority}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_value !== null) {
            $resourcePath = str_replace(
                "{" . "old_value" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_value),
                $resourcePath
            );
        }// path params
        if ($old_port !== null) {
            $resourcePath = str_replace(
                "{" . "old_port" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_port),
                $resourcePath
            );
        }// path params
        if ($old_weight !== null) {
            $resourcePath = str_replace(
                "{" . "old_weight" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_weight),
                $resourcePath
            );
        }// path params
        if ($old_priority !== null) {
            $resourcePath = str_replace(
                "{" . "old_priority" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_priority),
                $resourcePath
            );
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($port !== null) {
            $formParams['port'] = $this->apiClient->getSerializer()->toFormValue($port);
        }// form params
        if ($weight !== null) {
            $formParams['weight'] = $this->apiClient->getSerializer()->toFormValue($weight);
        }// form params
        if ($priority !== null) {
            $formParams['priority'] = $this->apiClient->getSerializer()->toFormValue($priority);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllTextTXT_
     *
     * list all text (TXT) records of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllTextTXT_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllTextTXT_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/txt";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewTextTXT_
     *
     * add a new text (TXT) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $value Value (required)
     * @param string $hostname Hostname (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewTextTXT_($domain_id, $value, $hostname=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewTextTXT_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addANewTextTXT_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/txt";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteATextTXT_
     *
     * delete a text (TXT) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Hostname (required)
     * @param string $value Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteATextTXT_($domain_id, $hostname, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteATextTXT_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteATextTXT_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling deleteATextTXT_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/txt/{hostname}/{value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($value !== null) {
            $resourcePath = str_replace(
                "{" . "value" . "}",
                $this->apiClient->getSerializer()->toPathValue($value),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateATextTXT_
     *
     * update a text (TXT) record of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Old Hostname (required)
     * @param string $old_value Old Value, must use urlencode (required)
     * @param string $value New Value (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateATextTXT_($domain_id, $old_hostname, $old_value, $value, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateATextTXT_');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateATextTXT_');
        }
        // verify the required parameter 'old_value' is set
        if ($old_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_value when calling updateATextTXT_');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling updateATextTXT_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dns/txt/{old_hostname}/{old_value}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/x-www-form-urlencoded'));



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_value !== null) {
            $resourcePath = str_replace(
                "{" . "old_value" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_value),
                $resourcePath
            );
        }
        // form params
        if ($value !== null) {
            $formParams['value'] = $this->apiClient->getSerializer()->toFormValue($value);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

}
