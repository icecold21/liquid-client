<?php
/**
 * ContactsApi
 * PHP version 5
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the liquid code generator program.
 * https://github.com/liquidregistrar/liquid-php
 * Do not edit the class manually.
 */

namespace Liquid\Client\Api;

use \Liquid\Client\Configuration;
use \Liquid\Client\ApiClient;
use \Liquid\Client\ApiException;
use \Liquid\Client\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
class ContactsApi
{

    /**
     * API Client
     * @var \Liquid\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \Liquid\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.liqu.id/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \Liquid\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \Liquid\Client\ApiClient $apiClient set the API client
     * @return ContactsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * contact
     *
     * list all contacts
     *
     * @param int $customer_id The Customer for which you want to get the Contact Details (required)
     * @param int $limit Limit number of Records to be returned. This should be a value between 10 to 100. (optional)
     * @param int $page_no Page Number for which records are required (optional)
     * @param string $contact_id Array of Contact Ids for listing of specific Contacts. Example: 1,2,3,4 (optional)
     * @param string $status List of Contact statuses. These can take any values from: InActive, Active, Suspended (optional)
     * @param string $name Name of Contact (optional)
     * @param string $company Name of the Company (optional)
     * @param string $email Email address of the Contact (optional)
     * @param string $eligibility_criteria The Eligibility Criteria. &lt;/br&gt;This can take following values : mn, name, biz, us, co, in, cc, ca, com, bz, mobi, info, tv, org, net, pw, asia (optional)
     * @param string $creation_date_start UNIX TimeStamp for listing of Customer accounts whose Creation Date is greater than creation_date_start. Value can be yyyy-mm-dd. (optional)
     * @param string $creation_date_end UNIX TimeStamp for listing of Customer accounts whose Creation Date is less than creation_date_end. Value can be yyyy-mm-dd. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contact($customer_id, $limit=null, $page_no=null, $contact_id=null, $status=null, $name=null, $company=null, $email=null, $eligibility_criteria=null, $creation_date_start=null, $creation_date_end=null)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contact');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        if ($page_no !== null) {
            $queryParams['page_no'] = $this->apiClient->getSerializer()->toQueryValue($page_no);
        }// query params
        if ($contact_id !== null) {
            $queryParams['contact_id'] = $this->apiClient->getSerializer()->toQueryValue($contact_id);
        }// query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }// query params
        if ($company !== null) {
            $queryParams['company'] = $this->apiClient->getSerializer()->toQueryValue($company);
        }// query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }// query params
        if ($eligibility_criteria !== null) {
            $queryParams['eligibility_criteria'] = $this->apiClient->getSerializer()->toQueryValue($eligibility_criteria);
        }// query params
        if ($creation_date_start !== null) {
            $queryParams['creation_date_start'] = $this->apiClient->getSerializer()->toQueryValue($creation_date_start);
        }// query params
        if ($creation_date_end !== null) {
            $queryParams['creation_date_end'] = $this->apiClient->getSerializer()->toQueryValue($creation_date_end);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * contacts
     *
     * create a new contact
     *
     * @param int $customer_id The Customer under whom you want to create the Contact (required)
     * @param string $name Name of the Contact (required)
     * @param string $company Name of the Company (required)
     * @param string $email Email address of the Contact (required)
     * @param string $address_line_1 First line of address of the Contact (required)
     * @param string $city Name of the City (required)
     * @param string $country_code Country Code as per ISO 3166-1 alpha-2. &lt;/br&gt; Example : id, us, gb, etc. (required)
     * @param string $zipcode Zip code (required)
     * @param string $tel_cc_no Telephone number Country Code (required)
     * @param string $tel_no Telephone number (required)
     * @param string $address_line_2 Second line of address of the Contact (optional)
     * @param string $address_line_3 Third line of address of the Contact (optional)
     * @param string $state Name of the State (optional)
     * @param string $fax_cc_no Fax number Country Code (optional)
     * @param string $fax_no Fax number (optional)
     * @param string $eligibility_criteria The Eligibility Criteria. &lt;/br&gt;This can take following values : mn, name, biz, us, co, in, cc, ca, com, bz, mobi, info, tv, org, net, pw, asia (optional)
     * @param string $extra Extra information to be associated for the Contact. Example for us : us_purpose=business&amp;us_category=citizen (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contacts($customer_id, $name, $company, $email, $address_line_1, $city, $country_code, $zipcode, $tel_cc_no, $tel_no, $address_line_2=null, $address_line_3=null, $state=null, $fax_cc_no=null, $fax_no=null, $eligibility_criteria=null, $extra=null)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contacts');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling contacts');
        }
        // verify the required parameter 'company' is set
        if ($company === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company when calling contacts');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling contacts');
        }
        // verify the required parameter 'address_line_1' is set
        if ($address_line_1 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address_line_1 when calling contacts');
        }
        // verify the required parameter 'city' is set
        if ($city === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city when calling contacts');
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling contacts');
        }
        // verify the required parameter 'zipcode' is set
        if ($zipcode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zipcode when calling contacts');
        }
        // verify the required parameter 'tel_cc_no' is set
        if ($tel_cc_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tel_cc_no when calling contacts');
        }
        // verify the required parameter 'tel_no' is set
        if ($tel_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tel_no when calling contacts');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }// form params
        if ($company !== null) {
            $formParams['company'] = $this->apiClient->getSerializer()->toFormValue($company);
        }// form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }// form params
        if ($address_line_1 !== null) {
            $formParams['address_line_1'] = $this->apiClient->getSerializer()->toFormValue($address_line_1);
        }// form params
        if ($address_line_2 !== null) {
            $formParams['address_line_2'] = $this->apiClient->getSerializer()->toFormValue($address_line_2);
        }// form params
        if ($address_line_3 !== null) {
            $formParams['address_line_3'] = $this->apiClient->getSerializer()->toFormValue($address_line_3);
        }// form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }// form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }// form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }// form params
        if ($zipcode !== null) {
            $formParams['zipcode'] = $this->apiClient->getSerializer()->toFormValue($zipcode);
        }// form params
        if ($tel_cc_no !== null) {
            $formParams['tel_cc_no'] = $this->apiClient->getSerializer()->toFormValue($tel_cc_no);
        }// form params
        if ($tel_no !== null) {
            $formParams['tel_no'] = $this->apiClient->getSerializer()->toFormValue($tel_no);
        }// form params
        if ($fax_cc_no !== null) {
            $formParams['fax_cc_no'] = $this->apiClient->getSerializer()->toFormValue($fax_cc_no);
        }// form params
        if ($fax_no !== null) {
            $formParams['fax_no'] = $this->apiClient->getSerializer()->toFormValue($fax_no);
        }// form params
        if ($eligibility_criteria !== null) {
            $formParams['eligibility_criteria'] = $this->apiClient->getSerializer()->toFormValue($eligibility_criteria);
        }// form params
        if ($extra !== null) {
            $formParams['extra'] = $this->apiClient->getSerializer()->toFormValue($extra);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * contactCustomer
     *
     * retrieve a customer's default contact
     *
     * @param int $customer_id The Customer for whom you want to fetch the default Name Servers. (required)
     * @param string $eligibility_criteria The Eligibility Criteria. &lt;/br&gt;This can take following values : mn, name, biz, us, co, in, cc, ca, com, bz, mobi, info, tv, org, net, pw, asia. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contactCustomer($customer_id, $eligibility_criteria=null)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contactCustomer');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts/default";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($eligibility_criteria !== null) {
            $queryParams['eligibility_criteria'] = $this->apiClient->getSerializer()->toQueryValue($eligibility_criteria);
        }

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * contact_1
     *
     * retrieve a contact
     *
     * @param int $customer_id The Customer under whom you want to Retrieve the Contact Details (required)
     * @param int $contact_id The Contact Id for which details are required (required)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contact_1($customer_id, $contact_id)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contact_1');
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling contact_1');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts/{contact_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }// path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contact_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * contacts_2
     *
     * update a contact
     *
     * @param int $customer_id The Customer under whom you want to update the Contact (required)
     * @param int $contact_id Contact ID of the Contact whose details you want to modify (required)
     * @param string $name Name of Contact (required)
     * @param string $company Name of the Company (required)
     * @param string $email Email address of the Contact (required)
     * @param string $address_line_1 First line of address of the Contact (required)
     * @param string $city Name of the City (required)
     * @param string $country_code Country code as per ISO 3166-1 alpha-2. &lt;/br&gt;Example : id, us, gb, etc. (required)
     * @param string $zipcode ZIP code (required)
     * @param string $tel_cc_no Telephone number Country Code (required)
     * @param string $tel_no Telephone number (required)
     * @param string $address_line_2 Second line of address of the Contact (optional)
     * @param string $address_line_3 Third line of address of the Contact (optional)
     * @param string $state Name of the State (optional)
     * @param string $fax_cc_no Fax number Country Code (optional)
     * @param string $fax_no Fax number (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contacts_2($customer_id, $contact_id, $name, $company, $email, $address_line_1, $city, $country_code, $zipcode, $tel_cc_no, $tel_no, $address_line_2=null, $address_line_3=null, $state=null, $fax_cc_no=null, $fax_no=null)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contacts_2');
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling contacts_2');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling contacts_2');
        }
        // verify the required parameter 'company' is set
        if ($company === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company when calling contacts_2');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling contacts_2');
        }
        // verify the required parameter 'address_line_1' is set
        if ($address_line_1 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $address_line_1 when calling contacts_2');
        }
        // verify the required parameter 'city' is set
        if ($city === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city when calling contacts_2');
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $country_code when calling contacts_2');
        }
        // verify the required parameter 'zipcode' is set
        if ($zipcode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zipcode when calling contacts_2');
        }
        // verify the required parameter 'tel_cc_no' is set
        if ($tel_cc_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tel_cc_no when calling contacts_2');
        }
        // verify the required parameter 'tel_no' is set
        if ($tel_no === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tel_no when calling contacts_2');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts/{contact_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }// path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contact_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }// form params
        if ($company !== null) {
            $formParams['company'] = $this->apiClient->getSerializer()->toFormValue($company);
        }// form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }// form params
        if ($address_line_1 !== null) {
            $formParams['address_line_1'] = $this->apiClient->getSerializer()->toFormValue($address_line_1);
        }// form params
        if ($address_line_2 !== null) {
            $formParams['address_line_2'] = $this->apiClient->getSerializer()->toFormValue($address_line_2);
        }// form params
        if ($address_line_3 !== null) {
            $formParams['address_line_3'] = $this->apiClient->getSerializer()->toFormValue($address_line_3);
        }// form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }// form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }// form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }// form params
        if ($zipcode !== null) {
            $formParams['zipcode'] = $this->apiClient->getSerializer()->toFormValue($zipcode);
        }// form params
        if ($tel_cc_no !== null) {
            $formParams['tel_cc_no'] = $this->apiClient->getSerializer()->toFormValue($tel_cc_no);
        }// form params
        if ($tel_no !== null) {
            $formParams['tel_no'] = $this->apiClient->getSerializer()->toFormValue($tel_no);
        }// form params
        if ($fax_cc_no !== null) {
            $formParams['fax_cc_no'] = $this->apiClient->getSerializer()->toFormValue($fax_cc_no);
        }// form params
        if ($fax_no !== null) {
            $formParams['fax_no'] = $this->apiClient->getSerializer()->toFormValue($fax_no);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * contact_3
     *
     * delete a contact
     *
     * @param int $customer_id The Customer under whom you want to update the Contact (required)
     * @param int $contact_id The Contact that you want to delete (required)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contact_3($customer_id, $contact_id)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contact_3');
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling contact_3');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts/{contact_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }// path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contact_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * contact_4
     *
     * update extra details of a contact
     *
     * @param int $customer_id The Customer under whom you want to update extra details of Contact (required)
     * @param int $contact_id The Contact with which you want to associate extra details (required)
     * @param string $eligibility_criteria The Eligibility Criteria. &lt;/br&gt;This can take following values : us, asia (required)
     * @param string $extra Array Extra Data. Extra information to be associated for the Contact. Example for us : us_purpose=business&amp;us_category=citizen (required)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contact_4($customer_id, $contact_id, $eligibility_criteria, $extra)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contact_4');
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling contact_4');
        }
        // verify the required parameter 'eligibility_criteria' is set
        if ($eligibility_criteria === null) {
            throw new \InvalidArgumentException('Missing the required parameter $eligibility_criteria when calling contact_4');
        }
        // verify the required parameter 'extra' is set
        if ($extra === null) {
            throw new \InvalidArgumentException('Missing the required parameter $extra when calling contact_4');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts/{contact_id}/extra";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }// path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contact_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }
        // form params
        if ($eligibility_criteria !== null) {
            $formParams['eligibility_criteria'] = $this->apiClient->getSerializer()->toFormValue($eligibility_criteria);
        }// form params
        if ($extra !== null) {
            $formParams['extra'] = $this->apiClient->getSerializer()->toFormValue($extra);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * contact_5
     *
     * retrieve contact validity
     *
     * @param int $customer_id The Customer under whom you want to retrieve the validity Contact (required)
     * @param int $contact_id The Registrant Contact Id(s) which you want to validate (required)
     * @param string $eligibility_criteria To retrieve validity the Registrant Contact(s), pass the appropriate Eligibility Criteria that can take following values : mn, name, biz, us, co, in, cc, ca, com, bz, mobi, info, tv, org, net, pw, asia. (required)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function contact_5($customer_id, $contact_id, $eligibility_criteria)
    {

        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling contact_5');
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contact_id when calling contact_5');
        }
        // verify the required parameter 'eligibility_criteria' is set
        if ($eligibility_criteria === null) {
            throw new \InvalidArgumentException('Missing the required parameter $eligibility_criteria when calling contact_5');
        }

        // parse inputs
        $resourcePath = "/customers/{customer_id}/contacts/{contact_id}/validity/{eligibility_criteria}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }// path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                "{" . "contact_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($contact_id),
                $resourcePath
            );
        }// path params
        if ($eligibility_criteria !== null) {
            $resourcePath = str_replace(
                "{" . "eligibility_criteria" . "}",
                $this->apiClient->getSerializer()->toPathValue($eligibility_criteria),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

}
