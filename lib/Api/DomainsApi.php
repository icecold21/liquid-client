<?php
/**
 * DomainsApi
 * PHP version 5
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the liquid code generator program.
 * https://github.com/liquidregistrar/liquid-php
 * Do not edit the class manually.
 */

namespace Liquid\Client\Api;

use \Liquid\Client\Configuration;
use \Liquid\Client\ApiClient;
use \Liquid\Client\ApiException;
use \Liquid\Client\ObjectSerializer;

/**
 * DomainsApi Class Doc Comment
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
class DomainsApi
{

    /**
     * API Client
     * @var \Liquid\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \Liquid\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.liqu.id/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \Liquid\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \Liquid\Client\ApiClient $apiClient set the API client
     * @return DomainsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * retrieve
     *
     * retrieve domain details
     *
     * @param int $limit Limit views. This should be a value between 10 to 100. (optional)
     * @param int $page_no Page number for which details are to be fetched (optional)
     * @param int $domain_id Domain ID (optional)
     * @param int $reseller_id Reseller Id(s) whose Orders need to be fetched (optional)
     * @param int $customer_id Customer Id(s) whose Orders need to be fetched (optional)
     * @param bool $show_child_orders Whether Sub-Reseller Orders need to be fetched or not (optional)
     * @param string $tld Top Level Domain (optional)
     * @param string $status Status domain. value : Live, Unpaid, Pending, Expired, Pending Delete Restorable, Pending Transfer, Pending Restore. (optional)
     * @param string $domain_name Name of the Domain (optional)
     * @param bool $privacy_protection_enabled Privacy Protect Enable (optional)
     * @param string $creation_time_start UNIX TimeStamp for listing of Domain Registration Orders whose Creation Date is greater than creation-date-start (optional)
     * @param string $creation_time_end UNIX TimeStamp for listing of Domain Registration Orders whose Creation Date is less than creation-date-end (optional)
     * @param string $expiry_date_start UNIX TimeStamp for listing of Domain Registration Orders whose Expiry Date is greater than expiry-date-start (optional)
     * @param string $expiry_date_end UNIX TimeStamp for listing of Domain Registration Orders whose Expiry Date is less than expiry-date-end (optional)
     * @param string $reseller_email Reseller Email whose Orders need to be fetched (optional)
     * @param string $customer_email Customer Email whose Orders need to be fetched (optional)
     * @param int $exact_domain_name Exact Domain Name, this will show only 1 result, with same name (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieve($limit=null, $page_no=null, $domain_id=null, $reseller_id=null, $customer_id=null, $show_child_orders=null, $tld=null, $status=null, $domain_name=null, $privacy_protection_enabled=null, $creation_time_start=null, $creation_time_end=null, $expiry_date_start=null, $expiry_date_end=null, $reseller_email=null, $customer_email=null, $exact_domain_name=null)
    {


        // parse inputs
        $resourcePath = "/domains";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        if ($page_no !== null) {
            $queryParams['page_no'] = $this->apiClient->getSerializer()->toQueryValue($page_no);
        }// query params
        if ($domain_id !== null) {
            $queryParams['domain_id'] = $this->apiClient->getSerializer()->toQueryValue($domain_id);
        }// query params
        if ($reseller_id !== null) {
            $queryParams['reseller_id'] = $this->apiClient->getSerializer()->toQueryValue($reseller_id);
        }// query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }// query params
        if ($show_child_orders !== null) {
            $queryParams['show_child_orders'] = $this->apiClient->getSerializer()->toQueryValue($show_child_orders);
        }// query params
        if ($tld !== null) {
            $queryParams['tld'] = $this->apiClient->getSerializer()->toQueryValue($tld);
        }// query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        if ($domain_name !== null) {
            $queryParams['domain_name'] = $this->apiClient->getSerializer()->toQueryValue($domain_name);
        }// query params
        if ($privacy_protection_enabled !== null) {
            $queryParams['privacy_protection_enabled'] = $this->apiClient->getSerializer()->toQueryValue($privacy_protection_enabled);
        }// query params
        if ($creation_time_start !== null) {
            $queryParams['creation_time_start'] = $this->apiClient->getSerializer()->toQueryValue($creation_time_start);
        }// query params
        if ($creation_time_end !== null) {
            $queryParams['creation_time_end'] = $this->apiClient->getSerializer()->toQueryValue($creation_time_end);
        }// query params
        if ($expiry_date_start !== null) {
            $queryParams['expiry_date_start'] = $this->apiClient->getSerializer()->toQueryValue($expiry_date_start);
        }// query params
        if ($expiry_date_end !== null) {
            $queryParams['expiry_date_end'] = $this->apiClient->getSerializer()->toQueryValue($expiry_date_end);
        }// query params
        if ($reseller_email !== null) {
            $queryParams['reseller_email'] = $this->apiClient->getSerializer()->toQueryValue($reseller_email);
        }// query params
        if ($customer_email !== null) {
            $queryParams['customer_email'] = $this->apiClient->getSerializer()->toQueryValue($customer_email);
        }// query params
        if ($exact_domain_name !== null) {
            $queryParams['exact_domain_name'] = $this->apiClient->getSerializer()->toQueryValue($exact_domain_name);
        }





        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * create
     *
     * create a new domain
     *
     * @param string $domain_name Domain name that you need to Register.\n\nFor an Internationalized Domain Name, refer to the supported character sets mentioned below: (required)
     * @param int $customer_id The Customer for whom you wish to Register this domain name. (required)
     * @param int $registrant_contact_id The &lt;strong&gt;Registrant Contact&lt;/strong&gt; of the domain name. (required)
     * @param int $billing_contact_id &lt;p&gt;The &lt;strong&gt;Billing Contact&lt;/strong&gt; of the domain name.&lt;/p&gt;&lt;hr&gt;\n					&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;\n					Pass -1 for the following TLDs:&lt;/br&gt;\n					.AT&lt;/br&gt;\n					.BERLIN&lt;/br&gt;\n					.CA&lt;/br&gt;\n					.EU&lt;/br&gt;\n					.NL&lt;/br&gt;\n					.NZ&lt;/br&gt;\n					.RU&lt;/br&gt;\n					.UK&lt;/br&gt; (required)
     * @param int $admin_contact_id &lt;p&gt;The &lt;strong&gt;Administrative&lt;/strong&gt; Contact of the domain name.&lt;/p&gt;&lt;hr&gt;\n					&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;\n					Pass -1 for the following TLDs:&lt;/br&gt;\n					.EU&lt;/br&gt;\n					.NZ&lt;/br&gt;\n					.RU&lt;/br&gt;\n					.UK&lt;/br&gt; (required)
     * @param int $tech_contact_id &lt;p&gt;The &lt;strong&gt;Technical Contact&lt;/strong&gt; of the domain name.&lt;/p&gt;&lt;hr&gt;\n					&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;\n					Pass -1 for the following TLDs:&lt;/br&gt;\n					.EU&lt;/br&gt;\n					.NZ&lt;/br&gt;\n					.RU&lt;/br&gt;\n					.UK&lt;/br&gt; (required)
     * @param string $invoice_option Invoice Option, example keep_invoice, pay_invoice, no_invoice, only_add (required)
     * @param int $years Years Order (optional)
     * @param string $ns Name Server, for multi ns example ns1.domainname.com,ns2.domainname.com (optional)
     * @param bool $purchase_privacy_protection Privacy Protect Order (optional)
     * @param bool $privacy_protection_enabled Enable Privacy Protect (optional)
     * @param string $extra Extra, example for .asia domain : asia_contact_id=0 (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function create($domain_name, $customer_id, $registrant_contact_id, $billing_contact_id, $admin_contact_id, $tech_contact_id, $invoice_option, $years=null, $ns=null, $purchase_privacy_protection=null, $privacy_protection_enabled=null, $extra=null)
    {

        // verify the required parameter 'domain_name' is set
        if ($domain_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_name when calling create');
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling create');
        }
        // verify the required parameter 'registrant_contact_id' is set
        if ($registrant_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registrant_contact_id when calling create');
        }
        // verify the required parameter 'billing_contact_id' is set
        if ($billing_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $billing_contact_id when calling create');
        }
        // verify the required parameter 'admin_contact_id' is set
        if ($admin_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $admin_contact_id when calling create');
        }
        // verify the required parameter 'tech_contact_id' is set
        if ($tech_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tech_contact_id when calling create');
        }
        // verify the required parameter 'invoice_option' is set
        if ($invoice_option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_option when calling create');
        }

        // parse inputs
        $resourcePath = "/domains";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());




        // form params
        if ($domain_name !== null) {
            $formParams['domain_name'] = $this->apiClient->getSerializer()->toFormValue($domain_name);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }// form params
        if ($registrant_contact_id !== null) {
            $formParams['registrant_contact_id'] = $this->apiClient->getSerializer()->toFormValue($registrant_contact_id);
        }// form params
        if ($billing_contact_id !== null) {
            $formParams['billing_contact_id'] = $this->apiClient->getSerializer()->toFormValue($billing_contact_id);
        }// form params
        if ($admin_contact_id !== null) {
            $formParams['admin_contact_id'] = $this->apiClient->getSerializer()->toFormValue($admin_contact_id);
        }// form params
        if ($tech_contact_id !== null) {
            $formParams['tech_contact_id'] = $this->apiClient->getSerializer()->toFormValue($tech_contact_id);
        }// form params
        if ($years !== null) {
            $formParams['years'] = $this->apiClient->getSerializer()->toFormValue($years);
        }// form params
        if ($ns !== null) {
            $formParams['ns'] = $this->apiClient->getSerializer()->toFormValue($ns);
        }// form params
        if ($purchase_privacy_protection !== null) {
            $formParams['purchase_privacy_protection'] = $this->apiClient->getSerializer()->toFormValue($purchase_privacy_protection);
        }// form params
        if ($privacy_protection_enabled !== null) {
            $formParams['privacy_protection_enabled'] = $this->apiClient->getSerializer()->toFormValue($privacy_protection_enabled);
        }// form params
        if ($extra !== null) {
            $formParams['extra'] = $this->apiClient->getSerializer()->toFormValue($extra);
        }// form params
        if ($invoice_option !== null) {
            $formParams['invoice_option'] = $this->apiClient->getSerializer()->toFormValue($invoice_option);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * availability
     *
     * check availability of a domain name
     *
     * @param string $domain Domain name(s) that you need to check the availability for (required)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function availability($domain)
    {

        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling availability');
        }

        // parse inputs
        $resourcePath = "/domains/availability";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($domain !== null) {
            $queryParams['domain'] = $this->apiClient->getSerializer()->toQueryValue($domain);
        }





        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * detailsByName
     *
     * Gets details of the Domain Registration Order associated with the specified domain name.
     *
     * @param string $domain_name Domain name associated with the Domain Registration Order whose details need to be fetched. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function detailsByName($domain_name, $customer_id=null)
    {

        // verify the required parameter 'domain_name' is set
        if ($domain_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_name when calling detailsByName');
        }

        // parse inputs
        $resourcePath = "/domains/details-by-name";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($domain_name !== null) {
            $queryParams['domain_name'] = $this->apiClient->getSerializer()->toQueryValue($domain_name);
        }// query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }





        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * suggestion
     *
     * retrieve domain suggestion for a keyword
     *
     * @param string $keyword Search term (keyword or phrase) e.g. &#39;search&#39; or &#39;search world&#39;&lt;/br&gt;&lt;/br&gt;\n\n				&lt;strong&gt;Note&lt;/strong&gt;&lt;/br&gt;\n				The search term will be considered as invalid, if it contains more than one consecutive space character. (required)
     * @param string $tlds Domain name extensions (TLDs) you want to search in (required)
     * @param string $limit Total want to appear. This should be a value between 10 to 100. (required)
     * @param bool $hyphen_allowed Default value is false. Recommended value is true. If true is passed, generates suggestions with hyphens (Dashes) (optional)
     * @param bool $add_related Default value is false. Recommended value is true. If true is passed, generates suggestions with related keywords. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function suggestion($keyword, $tlds, $limit, $hyphen_allowed=null, $add_related=null)
    {

        // verify the required parameter 'keyword' is set
        if ($keyword === null) {
            throw new \InvalidArgumentException('Missing the required parameter $keyword when calling suggestion');
        }
        // verify the required parameter 'tlds' is set
        if ($tlds === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tlds when calling suggestion');
        }
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $limit when calling suggestion');
        }

        // parse inputs
        $resourcePath = "/domains/suggestion";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }// query params
        if ($tlds !== null) {
            $queryParams['tlds'] = $this->apiClient->getSerializer()->toQueryValue($tlds);
        }// query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        if ($hyphen_allowed !== null) {
            $queryParams['hyphen_allowed'] = $this->apiClient->getSerializer()->toQueryValue($hyphen_allowed);
        }// query params
        if ($add_related !== null) {
            $queryParams['add_related'] = $this->apiClient->getSerializer()->toQueryValue($add_related);
        }





        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * transfer
     *
     * transfer domain
     *
     * @param string $domain_name Specify the domain name that you want to transfer. (required)
     * @param int $customer_id The Customer for whom the Order should be added. (required)
     * @param int $registrant_contact_id The Registrant Contact of the domain name.&lt;/br&gt;\n										The Identity of the Registrant Contact of a .UK domain name must not be changed during the Transfer process. You may modify the Identity once the domain name has been transferred to LogicBoxes. (required)
     * @param int $admin_contact_id The Administrative Contact of the domain name.&lt;/br&gt;\n						.EU, .NZ, .RU and .UK domain names do not have an Administrative Contact associated with them. You need to pass the value of admin-contact-id as -1 for these domain names. (required)
     * @param int $billing_contact_id The Billing Contact of the domain name.&lt;/br&gt;\n						The Billing Contact associated with a .EU domain name cannot be modified while .AT, .BERLIN, .CA, .NL, .NZ, .RU and .UK domain names do not have a Billing Contact associated with them. (required)
     * @param int $tech_contact_id The Technical Contact of the domain name.&lt;/br&gt;\n						The Technical Contact associated with a .EU domain name cannot be modified while .NZ, .RU and .UK domain names do not have a Technical Contact associated with them. You need to pass the value of tech-contact-id as -1 for these domain names. (required)
     * @param string $invoice_option This will decide how the Customer Invoice will be handled. Set any of below mentioned Invoice Options for your Customer:&lt;/br&gt;\n							- no_invoice &lt;/br&gt;\n							- pay_invoice&lt;/br&gt;\n							- keep_invoice&lt;/br&gt; (required)
     * @param string $auth_code Authorization Code (a.k.a. Domain Secret) of the domain name that you want to transfer. (optional)
     * @param string $years Years (optional)
     * @param string $ns List of Name Servers to be associated with the domain name. A maximum of 13 Name Servers can be specified. (optional)
     * @param string $extra Extra, example asia_contact_id=0 (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function transfer($domain_name, $customer_id, $registrant_contact_id, $admin_contact_id, $billing_contact_id, $tech_contact_id, $invoice_option, $auth_code=null, $years=null, $ns=null, $extra=null)
    {

        // verify the required parameter 'domain_name' is set
        if ($domain_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_name when calling transfer');
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling transfer');
        }
        // verify the required parameter 'registrant_contact_id' is set
        if ($registrant_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registrant_contact_id when calling transfer');
        }
        // verify the required parameter 'admin_contact_id' is set
        if ($admin_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $admin_contact_id when calling transfer');
        }
        // verify the required parameter 'billing_contact_id' is set
        if ($billing_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $billing_contact_id when calling transfer');
        }
        // verify the required parameter 'tech_contact_id' is set
        if ($tech_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tech_contact_id when calling transfer');
        }
        // verify the required parameter 'invoice_option' is set
        if ($invoice_option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_option when calling transfer');
        }

        // parse inputs
        $resourcePath = "/domains/transfer";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());




        // form params
        if ($domain_name !== null) {
            $formParams['domain_name'] = $this->apiClient->getSerializer()->toFormValue($domain_name);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }// form params
        if ($registrant_contact_id !== null) {
            $formParams['registrant_contact_id'] = $this->apiClient->getSerializer()->toFormValue($registrant_contact_id);
        }// form params
        if ($admin_contact_id !== null) {
            $formParams['admin_contact_id'] = $this->apiClient->getSerializer()->toFormValue($admin_contact_id);
        }// form params
        if ($billing_contact_id !== null) {
            $formParams['billing_contact_id'] = $this->apiClient->getSerializer()->toFormValue($billing_contact_id);
        }// form params
        if ($tech_contact_id !== null) {
            $formParams['tech_contact_id'] = $this->apiClient->getSerializer()->toFormValue($tech_contact_id);
        }// form params
        if ($auth_code !== null) {
            $formParams['auth_code'] = $this->apiClient->getSerializer()->toFormValue($auth_code);
        }// form params
        if ($years !== null) {
            $formParams['years'] = $this->apiClient->getSerializer()->toFormValue($years);
        }// form params
        if ($ns !== null) {
            $formParams['ns'] = $this->apiClient->getSerializer()->toFormValue($ns);
        }// form params
        if ($extra !== null) {
            $formParams['extra'] = $this->apiClient->getSerializer()->toFormValue($extra);
        }// form params
        if ($invoice_option !== null) {
            $formParams['invoice_option'] = $this->apiClient->getSerializer()->toFormValue($invoice_option);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveTransferRequestValidity
     *
     * retrieve transfer request validity of a domain name
     *
     * @param string $domain_name Domain name for which you want to check if the transfer request is valid. (required)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveTransferRequestValidity($domain_name)
    {

        // verify the required parameter 'domain_name' is set
        if ($domain_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_name when calling retrieveTransferRequestValidity');
        }

        // parse inputs
        $resourcePath = "/domains/transfer/validity";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());




        // form params
        if ($domain_name !== null) {
            $formParams['domain_name'] = $this->apiClient->getSerializer()->toFormValue($domain_name);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * ability
     *
     * retrieve a domain details
     *
     * @param int $domain_id domain ID (required)
     * @param string $fields Values can be: All, domain_details, billing_contact, registrant_contact, admin_contact, tech_contact, dnssec, dns, ns, domain_forwarding, childns, raa_verification. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function ability($domain_id, $fields, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling ability');
        }
        // verify the required parameter 'fields' is set
        if ($fields === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fields when calling ability');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }// query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * delete
     *
     * delete a domain
     *
     * @param int $domain_id domain id (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function delete($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling delete');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveAuthCode_
     *
     * retrieve auth code of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveAuthCode_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveAuthCode_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/auth_code";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateAuthCode_
     *
     * update auth code of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $auth_code New auth-code (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateAuthCode_($domain_id, $auth_code, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateAuthCode_');
        }
        // verify the required parameter 'auth_code' is set
        if ($auth_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $auth_code when calling updateAuthCode_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/auth_code";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($auth_code !== null) {
            $formParams['auth_code'] = $this->apiClient->getSerializer()->toFormValue($auth_code);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * listAllChildName_
     *
     * list all child name servers of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function listAllChildName_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling listAllChildName_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/childns";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * addANewChildName_
     *
     * add a new child name server for a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Child Name Servers name that you want to add. (required)
     * @param string $ip_address IP addresses that you want to associate with the Child Name Servers. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function addANewChildName_($domain_id, $hostname, $ip_address, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling addANewChildName_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling addANewChildName_');
        }
        // verify the required parameter 'ip_address' is set
        if ($ip_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ip_address when calling addANewChildName_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/childns";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($ip_address !== null) {
            $formParams['ip_address'] = $this->apiClient->getSerializer()->toFormValue($ip_address);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteAChildName_
     *
     * delete a child name server of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $hostname Child Name Server&#39;s name for which the IP address needs to be deleted. (required)
     * @param string $ip_address IP address that needs to be deleted. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteAChildName_($domain_id, $hostname, $ip_address, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteAChildName_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling deleteAChildName_');
        }
        // verify the required parameter 'ip_address' is set
        if ($ip_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ip_address when calling deleteAChildName_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/childns/{hostname}/{ip_address}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($hostname !== null) {
            $resourcePath = str_replace(
                "{" . "hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($hostname),
                $resourcePath
            );
        }// path params
        if ($ip_address !== null) {
            $resourcePath = str_replace(
                "{" . "ip_address" . "}",
                $this->apiClient->getSerializer()->toPathValue($ip_address),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateAChildName_
     *
     * update a child name server of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $old_hostname Current Child Name Server of the specified Order. (required)
     * @param string $old_ip_address Currently associated IP address with the specified Child Name Server. (required)
     * @param string $hostname New Child Name Server that you want to associate with the Order. (required)
     * @param string $ip_address New IP address that you want to associate with the specified Child Name Server. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateAChildName_($domain_id, $old_hostname, $old_ip_address, $hostname, $ip_address, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateAChildName_');
        }
        // verify the required parameter 'old_hostname' is set
        if ($old_hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_hostname when calling updateAChildName_');
        }
        // verify the required parameter 'old_ip_address' is set
        if ($old_ip_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $old_ip_address when calling updateAChildName_');
        }
        // verify the required parameter 'hostname' is set
        if ($hostname === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hostname when calling updateAChildName_');
        }
        // verify the required parameter 'ip_address' is set
        if ($ip_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ip_address when calling updateAChildName_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/childns/{old_hostname}/{old_ip_address}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($old_hostname !== null) {
            $resourcePath = str_replace(
                "{" . "old_hostname" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_hostname),
                $resourcePath
            );
        }// path params
        if ($old_ip_address !== null) {
            $resourcePath = str_replace(
                "{" . "old_ip_address" . "}",
                $this->apiClient->getSerializer()->toPathValue($old_ip_address),
                $resourcePath
            );
        }
        // form params
        if ($hostname !== null) {
            $formParams['hostname'] = $this->apiClient->getSerializer()->toFormValue($hostname);
        }// form params
        if ($ip_address !== null) {
            $formParams['ip_address'] = $this->apiClient->getSerializer()->toFormValue($ip_address);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * update
     *
     * update domain contact
     *
     * @param int $domain_id domain id (required)
     * @param int $registrant_contact_id The Contact that you want to use as the new Registrant Contact (required)
     * @param int $billing_contact_id The Contact that you want to use as the new Billing Contact (required)
     * @param int $admin_contact_id The Contact that you want to use as the new Admin Contact (required)
     * @param int $tech_contact_id The Contact that you want to use as the new Technical Contact (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function update($domain_id, $registrant_contact_id, $billing_contact_id, $admin_contact_id, $tech_contact_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling update');
        }
        // verify the required parameter 'registrant_contact_id' is set
        if ($registrant_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $registrant_contact_id when calling update');
        }
        // verify the required parameter 'billing_contact_id' is set
        if ($billing_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $billing_contact_id when calling update');
        }
        // verify the required parameter 'admin_contact_id' is set
        if ($admin_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $admin_contact_id when calling update');
        }
        // verify the required parameter 'tech_contact_id' is set
        if ($tech_contact_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tech_contact_id when calling update');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/contacts";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($registrant_contact_id !== null) {
            $formParams['registrant_contact_id'] = $this->apiClient->getSerializer()->toFormValue($registrant_contact_id);
        }// form params
        if ($billing_contact_id !== null) {
            $formParams['billing_contact_id'] = $this->apiClient->getSerializer()->toFormValue($billing_contact_id);
        }// form params
        if ($admin_contact_id !== null) {
            $formParams['admin_contact_id'] = $this->apiClient->getSerializer()->toFormValue($admin_contact_id);
        }// form params
        if ($tech_contact_id !== null) {
            $formParams['tech_contact_id'] = $this->apiClient->getSerializer()->toFormValue($tech_contact_id);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveAllDnssec
     *
     * Retrieve All Delegation Signer (DS) Record
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveAllDnssec($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveAllDnssec');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dnssec";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * createDnssec
     *
     * Adding a Delegation Signer (DS) Record
     *
     * @param int $domain_id domain id (required)
     * @param int $keytag Contains the tag value of the DNSKEY Resource Record that validates this signature. An integer value in the range 0 to 65536. (required)
     * @param int $algorithm An integer value 1, 2, 3, 4, 5, 6, 7, 8, 10, 252, 253 &amp; 254 (required)
     * @param int $digesttype Min 1 max 3 (required)
     * @param string $digest An alpha-numeric string generated by applying the Digest Type algorithm to a message. It needs to be a 40-character string for Digest Type value 1 and a 64-character string for Digest Type values 2 and 3. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function createDnssec($domain_id, $keytag, $algorithm, $digesttype, $digest, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling createDnssec');
        }
        // verify the required parameter 'keytag' is set
        if ($keytag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $keytag when calling createDnssec');
        }
        // verify the required parameter 'algorithm' is set
        if ($algorithm === null) {
            throw new \InvalidArgumentException('Missing the required parameter $algorithm when calling createDnssec');
        }
        // verify the required parameter 'digesttype' is set
        if ($digesttype === null) {
            throw new \InvalidArgumentException('Missing the required parameter $digesttype when calling createDnssec');
        }
        // verify the required parameter 'digest' is set
        if ($digest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $digest when calling createDnssec');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dnssec";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($keytag !== null) {
            $formParams['keytag'] = $this->apiClient->getSerializer()->toFormValue($keytag);
        }// form params
        if ($algorithm !== null) {
            $formParams['algorithm'] = $this->apiClient->getSerializer()->toFormValue($algorithm);
        }// form params
        if ($digesttype !== null) {
            $formParams['digesttype'] = $this->apiClient->getSerializer()->toFormValue($digesttype);
        }// form params
        if ($digest !== null) {
            $formParams['digest'] = $this->apiClient->getSerializer()->toFormValue($digest);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * deleteADnssecRecord
     *
     * Delete a Delegation Signer (DS) Record
     *
     * @param int $domain_id Domain ID (required)
     * @param int $keytag Contains the tag value of the DNSKEY Resource Record that validates this signature. An integer value in the range 0 to 65536. (required)
     * @param int $algorithm An integer value 1, 2, 3, 4, 5, 6, 7, 8, 10, 252, 253 &amp; 254 (required)
     * @param int $digesttype Min 1 max 3 (required)
     * @param string $digest An alpha-numeric string generated by applying the Digest Type algorithm to a message. It needs to be a 40-character string for Digest Type value 1 and a 64-character string for Digest Type values 2 and 3. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function deleteADnssecRecord($domain_id, $keytag, $algorithm, $digesttype, $digest, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling deleteADnssecRecord');
        }
        // verify the required parameter 'keytag' is set
        if ($keytag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $keytag when calling deleteADnssecRecord');
        }
        // verify the required parameter 'algorithm' is set
        if ($algorithm === null) {
            throw new \InvalidArgumentException('Missing the required parameter $algorithm when calling deleteADnssecRecord');
        }
        // verify the required parameter 'digesttype' is set
        if ($digesttype === null) {
            throw new \InvalidArgumentException('Missing the required parameter $digesttype when calling deleteADnssecRecord');
        }
        // verify the required parameter 'digest' is set
        if ($digest === null) {
            throw new \InvalidArgumentException('Missing the required parameter $digest when calling deleteADnssecRecord');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/dnssec/{keytag}/{algorithm}/{digesttype}/{digest}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }// path params
        if ($keytag !== null) {
            $resourcePath = str_replace(
                "{" . "keytag" . "}",
                $this->apiClient->getSerializer()->toPathValue($keytag),
                $resourcePath
            );
        }// path params
        if ($algorithm !== null) {
            $resourcePath = str_replace(
                "{" . "algorithm" . "}",
                $this->apiClient->getSerializer()->toPathValue($algorithm),
                $resourcePath
            );
        }// path params
        if ($digesttype !== null) {
            $resourcePath = str_replace(
                "{" . "digesttype" . "}",
                $this->apiClient->getSerializer()->toPathValue($digesttype),
                $resourcePath
            );
        }// path params
        if ($digest !== null) {
            $resourcePath = str_replace(
                "{" . "digest" . "}",
                $this->apiClient->getSerializer()->toPathValue($digest),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveDomainLocked
     *
     * retrieve domain locked status
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveDomainLocked($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveDomainLocked');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/locked";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * locked
     *
     * locked a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $reason Reason of Locking Domain. (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function locked($domain_id, $reason=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling locked');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/locked";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($reason !== null) {
            $formParams['reason'] = $this->apiClient->getSerializer()->toFormValue($reason);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * unlock
     *
     * unlock a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function unlock($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling unlock');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/locked";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * move
     *
     * move domain
     *
     * @param int $domain_id domain id (required)
     * @param int $existing_customer_id Existing Customer ID from which the products are to be transferred (required)
     * @param int $new_reseller_id New Reseller ID to which the products are to be transferred (required)
     * @param int $new_customer_id New Customer ID to which the products are to be transferred (required)
     * @param bool $default_contacts Value to indicate whether the old Contact has to be retained or to use the Default Contact of the new Customer. Valid entries are oldcontact or default. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function move($domain_id, $existing_customer_id, $new_reseller_id, $new_customer_id, $default_contacts, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling move');
        }
        // verify the required parameter 'existing_customer_id' is set
        if ($existing_customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $existing_customer_id when calling move');
        }
        // verify the required parameter 'new_reseller_id' is set
        if ($new_reseller_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_reseller_id when calling move');
        }
        // verify the required parameter 'new_customer_id' is set
        if ($new_customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_customer_id when calling move');
        }
        // verify the required parameter 'default_contacts' is set
        if ($default_contacts === null) {
            throw new \InvalidArgumentException('Missing the required parameter $default_contacts when calling move');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/move";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($existing_customer_id !== null) {
            $formParams['existing_customer_id'] = $this->apiClient->getSerializer()->toFormValue($existing_customer_id);
        }// form params
        if ($new_reseller_id !== null) {
            $formParams['new_reseller_id'] = $this->apiClient->getSerializer()->toFormValue($new_reseller_id);
        }// form params
        if ($new_customer_id !== null) {
            $formParams['new_customer_id'] = $this->apiClient->getSerializer()->toFormValue($new_customer_id);
        }// form params
        if ($default_contacts !== null) {
            $formParams['default_contacts'] = $this->apiClient->getSerializer()->toFormValue($default_contacts);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveNs
     *
     * retrieve name servers of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveNs($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveNs');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/ns";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateNs
     *
     * update name servers of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $ns New name server. (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateNs($domain_id, $ns, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateNs');
        }
        // verify the required parameter 'ns' is set
        if ($ns === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ns when calling updateNs');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/ns";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($ns !== null) {
            $formParams['ns'] = $this->apiClient->getSerializer()->toFormValue($ns);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveRAAVerificationStatus_
     *
     * retrieve RAA Verification status of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveRAAVerificationStatus_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveRAAVerificationStatus_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/raa_verification";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * resendRAAVerificationEmail
     *
     * resend RAA Verification email of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function resendRAAVerificationEmail($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling resendRAAVerificationEmail');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/raa_verification/resend";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * renew
     *
     * renew domain order
     *
     * @param int $domain_id domain id (required)
     * @param int $years Number of years for which you want to Renew this Order. (required)
     * @param string $current_date Current Expiry Date of the Order in epoch time format. (required)
     * @param string $invoice_option This will decide how the Customer Invoice will be handled. &lt;br/&gt;\n							Set any of below mentioned Invoice Options for your Customer:&lt;br/&gt;\n							- no_invoice &lt;/br&gt;\n							- pay_invoice &lt;/br&gt;\n							- keep_invoice&lt;/br&gt;\n							- only_add (required)
     * @param bool $purchase_privacy_protection Renews the Privacy Protection service for the domain name (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function renew($domain_id, $years, $current_date, $invoice_option, $purchase_privacy_protection=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling renew');
        }
        // verify the required parameter 'years' is set
        if ($years === null) {
            throw new \InvalidArgumentException('Missing the required parameter $years when calling renew');
        }
        // verify the required parameter 'current_date' is set
        if ($current_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $current_date when calling renew');
        }
        // verify the required parameter 'invoice_option' is set
        if ($invoice_option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_option when calling renew');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/renew";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($years !== null) {
            $formParams['years'] = $this->apiClient->getSerializer()->toFormValue($years);
        }// form params
        if ($current_date !== null) {
            $formParams['current_date'] = $this->apiClient->getSerializer()->toFormValue($current_date);
        }// form params
        if ($purchase_privacy_protection !== null) {
            $formParams['purchase_privacy_protection'] = $this->apiClient->getSerializer()->toFormValue($purchase_privacy_protection);
        }// form params
        if ($invoice_option !== null) {
            $formParams['invoice_option'] = $this->apiClient->getSerializer()->toFormValue($invoice_option);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * restore
     *
     * restore domain order
     *
     * @param int $domain_id domain id (required)
     * @param string $invoice_option This will decide how the Customer Invoice will be handled. Set any of below mentioned Invoice Options for your Customer: keep_invoice, pay_invoice, no_invoice (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function restore($domain_id, $invoice_option, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling restore');
        }
        // verify the required parameter 'invoice_option' is set
        if ($invoice_option === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invoice_option when calling restore');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/restore";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($invoice_option !== null) {
            $formParams['invoice_option'] = $this->apiClient->getSerializer()->toFormValue($invoice_option);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveDomainSuspend
     *
     * retrieve domain suspend status
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveDomainSuspend($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveDomainSuspend');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/suspended";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * suspend
     *
     * suspend a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $reason Reason of Suspending Domain. (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function suspend($domain_id, $reason=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling suspend');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/suspended";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($reason !== null) {
            $formParams['reason'] = $this->apiClient->getSerializer()->toFormValue($reason);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * unsuspend
     *
     * unsuspend a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function unsuspend($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling unsuspend');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/suspended";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * retrieveThiefProtect
     *
     * retrieve theft protection status of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveThiefProtect($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveThiefProtect');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/theft_protection";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * enableThiefProtect
     *
     * enable theft protection on a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function enableThiefProtect($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling enableThiefProtect');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/theft_protection";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * disableThiefProtect
     *
     * disable theft protection on a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function disableThiefProtect($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling disableThiefProtect');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/theft_protection";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * cancellingATransfer
     *
     * Cancels the Transfer-In Order that is awaiting Admin approval.
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function cancellingATransfer($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling cancellingATransfer');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/transfer/cancel";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * resendTransferApprovalEmail
     *
     * resend transfer approval email
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function resendTransferApprovalEmail($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling resendTransferApprovalEmail');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/transfer/resend_approval_email";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

}
