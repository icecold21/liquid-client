<?php
/**
 * DomainforwardingApi
 * PHP version 5
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the liquid code generator program.
 * https://github.com/liquidregistrar/liquid-php
 * Do not edit the class manually.
 */

namespace Liquid\Client\Api;

use \Liquid\Client\Configuration;
use \Liquid\Client\ApiClient;
use \Liquid\Client\ApiException;
use \Liquid\Client\ObjectSerializer;

/**
 * DomainforwardingApi Class Doc Comment
 *
 * @category Class
 * @package  Liquid\Client
 * @author   http://github.com/liquidregistrar/liquid-php
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/liquidregistrar/liquid-php
 */
class DomainforwardingApi
{

    /**
     * API Client
     * @var \Liquid\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \Liquid\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.liqu.id/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \Liquid\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \Liquid\Client\ApiClient $apiClient set the API client
     * @return DomainforwardingApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * retrieveDomainForwarding_
     *
     * retrieve domain forwarding settings of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function retrieveDomainForwarding_($domain_id, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling retrieveDomainForwarding_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/domain_forwarding";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = $this->apiClient->getSerializer()->toQueryValue($customer_id);
        }

        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }



        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

    /**
     * updateDomainForwarding_
     *
     * update domain forwarding settings of a domain
     *
     * @param int $domain_id Domain ID (required)
     * @param string $forward_to URL where you want to forward your request. (optional)
     * @param string $meta_tags Sets META Tags and Page Title for the frames page which is sent to the visitor (optional)
     * @param string $no_frames_content Sets alternate &lt;strong&gt;NOFRAMES&lt;/strong&gt; page content for search engines. Provide your HTML within &lt;strong&gt; &lt; NOFRAMES &gt; &lt; /NOFRAMES &gt;&lt;/strong&gt; tags to set alternate page content. (optional)
     * @param bool $subdomain_forwarding Possible values are true or false. For e.g. if true passed, a request made to&lt;/br&gt;\n					http://subdomain.domainname.com&lt;/br&gt;\n					will be forwarded to&lt;/br&gt;\n					http://destination-domainname.com/subdomain&lt;/br&gt; (optional)
     * @param bool $path_forwarding Possible values are true or false. For e.g. if true passed, a request made to&lt;/br&gt;\n					http://domainname.com/some/path&lt;/br&gt;\n					will be forwarded to&lt;/br&gt;\n					http://destination-domainname.com/some/path&lt;/br&gt; (optional)
     * @param bool $url_masking Possible values are true or false. If true passed, visitors will see the source URL and not the destination URL (optional)
     * @param int $customer_id Customer Id. (optional)
     * @return void
     * @throws \Liquid\Client\ApiException on non-2xx response
     */
    public function updateDomainForwarding_($domain_id, $forward_to=null, $meta_tags=null, $no_frames_content=null, $subdomain_forwarding=null, $path_forwarding=null, $url_masking=null, $customer_id=null)
    {

        // verify the required parameter 'domain_id' is set
        if ($domain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain_id when calling updateDomainForwarding_');
        }

        // parse inputs
        $resourcePath = "/domains/{domain_id}/domain_forwarding";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());



        // path params
        if ($domain_id !== null) {
            $resourcePath = str_replace(
                "{" . "domain_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain_id),
                $resourcePath
            );
        }
        // form params
        if ($forward_to !== null) {
            $formParams['forward_to'] = $this->apiClient->getSerializer()->toFormValue($forward_to);
        }// form params
        if ($meta_tags !== null) {
            $formParams['meta_tags'] = $this->apiClient->getSerializer()->toFormValue($meta_tags);
        }// form params
        if ($no_frames_content !== null) {
            $formParams['no_frames_content'] = $this->apiClient->getSerializer()->toFormValue($no_frames_content);
        }// form params
        if ($subdomain_forwarding !== null) {
            $formParams['subdomain_forwarding'] = $this->apiClient->getSerializer()->toFormValue($subdomain_forwarding);
        }// form params
        if ($path_forwarding !== null) {
            $formParams['path_forwarding'] = $this->apiClient->getSerializer()->toFormValue($path_forwarding);
        }// form params
        if ($url_masking !== null) {
            $formParams['url_masking'] = $this->apiClient->getSerializer()->toFormValue($url_masking);
        }// form params
        if ($customer_id !== null) {
            $formParams['customer_id'] = $this->apiClient->getSerializer()->toFormValue($customer_id);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );

            return array($response, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }

    }

}
